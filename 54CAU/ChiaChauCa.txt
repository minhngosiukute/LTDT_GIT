#include <stdio.h>
#define Max 100
#define NO_COLOR 0
#define BLUE 1
#define RED 2
typedef struct {
	int x,y;
}Edge;

typedef struct {
	Edge edges[Max];
	int n,m;
}Graph;

void init_Graph(Graph *G,int n) {
	G->n = n;
	G->m = 0;
}

void add_Edge(Graph *G,int x,int y) {
	int i;
	for(i=0;i<G->m;i++) {
		if((G->edges[i].x == x && G->edges[i].y == y) || (G->edges[i].x == y && G->edges[i].y == x)) {
			return;
		}
	}
	G->edges[G->m].x = x;
	G->edges[G->m].y = y;
	G->m++;
}
int adjacent(Graph *G,int x,int y) {
	int i;
	for(i=0;i<G->m;i++) {
		if((G->edges[i].x == x && G->edges[i].y == y) || (G->edges[i].x == y && G->edges[i].y == x)) {
			return 1;
		}
	}
	return 0;
}
int color[Max];
int conflict = 0;
void colorize(Graph *G,int u,int c) {
	color[u] = c;
	int i;
	for(i=1;i<=G->n;i++) {
		if(adjacent(G,u,i)) {
			if(color[i] == NO_COLOR) {
				colorize(G,i,3-c);
			}else if(color[i] == color[u]) {
				conflict = 1;
			}
		}
	}
}
int  dem_team(int n,int c) {
	int dem=0;
	int i;
	for(i=1;i<=n;i++) {
		if(color[i] == c) {
			dem++;
		}
	}
	return dem;
}
int main() {
	Graph G;
	
	int n,m;
	scanf("%d%d",&n,&m);
	init_Graph(&G,n);
	int x,y,i;
	for(i=0;i<m;i++) {
		scanf("%d%d",&x,&y);
		add_Edge(&G,x,y);
	}
	for(i=1;i<=n;i++) {
		color[i] = NO_COLOR;
	}
	for(i=1;i<=n;i++) {
		if(color[i] == NO_COLOR) {
			colorize(&G,i,BLUE);
		}
	}
	if(conflict == 1) {
		printf("-1 -1");
	}else {
		int demxanh=dem_team(n,BLUE);
		
		int demdo= dem_team(n,RED);
		printf ("%d %d", demxanh,demdo);
	}
}




