#include <stdio.h>
#define INF 999999
#define MAXN 100
#define NO_EDGE -1
typedef struct {
	int L[MAXN][MAXN];
	int m,n;
}Graph;

void initGraph(Graph *pG, int n){
	int i,j;
	pG->n=n;
	pG->m=0;
	for (i=1;i<=n;i++)
		for (j=1;j<=n;j++)
			pG->L[i][j]=NO_EDGE;
}

void addEdge(Graph *pG, int u, int v, int w){
	pG->L[u][v]=w;
	pG->L[v][u]=w;
	pG->m++;
}


int mark[MAXN];
int pi[MAXN];
int p[MAXN];

void Dijkstra(Graph *pG, int s,int L){
	int i,j,e;
	for (i=1;i<=pG->n;i++){
		pi[i]=INF;
		mark[i]=0;
	}
	pi[s]=0;
	p[s]=-1;
	for (e=1;e<pG->n;e++){
		int min_pi=INF;
		for (j=1;j<=pG->n;j++)
			if (mark[j]==0 && pi[j]<min_pi){
				min_pi=pi[j];
				i=j;
			}
		mark[i]=1;
		for (j=1;j<=pG->n;j++)
			if (pG->L[i][j] !=NO_EDGE && mark[j]==0 && pG->L[i][j]<=L ){
				if (pi[i]+pG->L[i][j]<pi[j]){
					pi[j]=pi[i]+pG->L[i][j];
					p[j]=i;
				}
			}
	}
	
}
int main(){

	int n, m, L;
	scanf("%d%d%d", &n, &m, &L);
	Graph G;
	initGraph(&G, n);
	int i;
	for(i=0; i<m; i++){
	int u, v, w;
	scanf("%d%d%d", &u, &v, &w);
	addEdge(&G, u, v, w);
	}
	int y;
	scanf ("%d", &y);
	
	Dijkstra(&G, 1, L);
    
	if (pi[y]==INF) printf ("KHONG DI DUOC");
	else  printf ("%d", pi[y]);

	
	return 0;
}
